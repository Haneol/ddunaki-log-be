name: Spring Boot CI/CD to Oracle Cloud

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
    - uses: actions/checkout@v3
    
    - name: Create application-secret.yml
      run: |
        cat << EOF > src/main/resources/application-secret.yml
        spring:
          mail:
            username: ${{ secrets.MAIL_USERNAME }}
            password: ${{ secrets.MAIL_PASSWORD }}
        jwt:
          secret-key: ${{ secrets.JWT_SECRET_KEY }}
        cloud:
          aws:
            credentials:
              accessKey: ${{ secrets.AWS_ACCESS_KEY }}
              secretKey: ${{ secrets.AWS_SECRET_KEY }}
        EOF
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew bootJar
      
    - name: Copy jar file via SCP
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.ORACLE_CLOUD_HOST }}
        username: ${{ secrets.ORACLE_CLOUD_USER }}
        key: ${{ secrets.ORACLE_CLOUD_SSH_KEY }}
        source: "build/libs/*.jar"
        target: "~/app"
        strip_components: 2

    - name: Deploy to Oracle Cloud
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.ORACLE_CLOUD_HOST }}
        username: ${{ secrets.ORACLE_CLOUD_USER }}
        key: ${{ secrets.ORACLE_CLOUD_SSH_KEY }}
        script: |
          # 환경 변수 설정
          export DB_URL="${{ secrets.DB_URL }}"
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}"
          export MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
          export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          export AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}"
          export AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}"
          
          # 기존 프로세스 종료
          pid=$(pgrep -f email-sender) && kill -9 $pid || true
          
          # 새로운 jar 파일 실행
          cd ~/app
          nohup java -jar \
            -Dspring.profiles.active=prod \
            -Dspring.datasource.url=${DB_URL} \
            -Dspring.datasource.username=${DB_USERNAME} \
            -Dspring.datasource.password=${DB_PASSWORD} \
            -Dspring.mail.username=${MAIL_USERNAME} \
            -Dspring.mail.password=${MAIL_PASSWORD} \
            -Djwt.secret-key=${JWT_SECRET_KEY} \
            -Dcloud.aws.credentials.accessKey=${AWS_ACCESS_KEY} \
            -Dcloud.aws.credentials.secretKey=${AWS_SECRET_KEY} \
            *.jar > app.log 2>&1 &
